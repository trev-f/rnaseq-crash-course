# Map Reads

## Learning objectives

- Download reference genome and annotations
- Map reads to reference genome with STAR
- Generate index for BAM files
- Generate QC report for mapped reads

## Purpose

Mapping high-quality reads to a reference is a fundamental step in a typical RNA-seq analysis.

This mapping step assigns a read to the genomic locus that it is (likely) derived from.
We can use this mapping information to generate a variety of data for downstream analysis such as determining the expression levels of genes, identifying novel splice sites, and identifying genomic variants[^1].

After read trimming, we run FastQC on the trimmed reads to make sure the trimming mitigated any issues observed at the raw reads QC step.

[^1]: The types of analyses we can perform are determined by factors such as availability of genomic resources, library construction, sequencing depth, etc.

## Overview of mapping workflow

```{mermaid}
flowchart LR
    ref_genome[(Reference\nGenome)]
    ref_annotations[(Reference\nAnnotations)]
    build_index{STAR\ngenomeGenerate}
    ref_index[(Reference\nIndex)]

    ref_genome --- build_index
    ref_annotations --- build_index
    build_index --> ref_index
```

## Software usage

### STAR usage

#### Software availability

STAR is available as a module that can be loaded on ISAAC:

``` {.bash filename="Terminal"}
module load star/2.7.6a
```


Alternatively, more recent versions are available as Apptainer containers through BioContainers:

```{.bash filename="Terminal"}
function STAR {
  local image_uri="https://depot.galaxyproject.org/singularity/star%3A2.7.11b--h43eeafb_1"
  apptainer exec "${image_uri}" STAR "${@}"
}
```


Both of the methods above make STAR available through the `STAR` command.


### Command usage --- Generate genome index

Basic usage:

``` {.bash filename="Terminal"}
STAR \
  --runMode genomeGenerate \
  --genomeFastaFiles genome.fasta \
  --sjdbGTFfile annotations.gtf \
  --genomeDir STAR
```


## Scripts

### Generate genome index script

``` {.bash filename="generate_genome_index.sh"}
#!/bin/bash

#SBATCH --job-name=generate_genome_index
#SBATCH --cpus-per-task=8
#SBATCH --mem=32GB
#SBATCH --time=00-04:00:00
<... Remaining constant SBATCH flags ...>


#######################################
# Constants
#######################################
# Path to directory where references should be stored
readonly references_dir="data/references"
# Path to directory where STAR genome index should be stored
readonly star_genome_dir="${references_dir}/STAR"
# URL for reference genome in fasta (fna) format
readonly genome_url="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/263/795/GCF_002263795.3_ARS-UCD2.0/GCF_002263795.3_ARS-UCD2.0_genomic.fna.gz"
# URL for reference gene annotations in GTF format
readonly annotations_url="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/263/795/GCF_002263795.3_ARS-UCD2.0/GCF_002263795.3_ARS-UCD2.0_genomic.gtf.gz"


#######################################
# Load software
#######################################
# echo to stderr
function errcho {
  >&2 echo "${@}"
}
function STAR {
  local image_uri="https://depot.galaxyproject.org/singularity/star%3A2.7.11b--h43eeafb_1"
  apptainer exec "${image_uri}" STAR "${@}"
}


#######################################
# Main program
#######################################
# create target directories
mkdir -p "${references_dir}"

# download reference genome
errcho "Download reference genome"
wget \
  --no-clobber \
  --directory-prefix="${references_dir}" \
  "${genome_url}"
# store the path to the reference genome in a variable
genome_path="${references_dir}/$(basename "${genome_url}")"

# download reference gene annotations
errcho "Download reference gene annotations"
wget \
  --no-clobber \
  --directory-prefix="${references_dir}" \
  "${annotations_url}"
# store the path to the reference genome in a variable
annotations_path="${references_dir}/$(basename "${annotations_url}")"

# decompress gzipped genome and annotations files
# this is done using named pipes for the convenience of not having to manage uncompressed files
mkfifo genome && zcat "${genome_path}" > genome &
mkfifo annotations && zcat "${annotations_path}" > annotations &

# generate STAR genome index
errcho "Generate STAR genome index"
STAR \
  --runMode genomeGenerate \
  --genomeDir "${star_genome_dir}" \
  --runThreadN "${SLURM_CPUS_PER_TASK:-1}" \
  --genomeFastaFiles genome \
  --sjdbGTFfile annotations

# remove the named pipes
unlink genome
unlink annotations
```
