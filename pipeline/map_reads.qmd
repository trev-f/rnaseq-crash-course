# Map Reads

## Learning objectives

- Download reference genome and annotations
- Map reads to reference genome with STAR
- Generate index for BAM files
- Generate QC report for mapped reads

## Purpose

Mapping high-quality reads to a reference is a fundamental step in a typical RNA-seq analysis.

This mapping step assigns a read to the genomic locus that it is (likely) derived from.
We can use this mapping information to generate a variety of data for downstream analysis such as determining the expression levels of genes, identifying novel splice sites, and identifying genomic variants[^1].

After read trimming, we run FastQC on the trimmed reads to make sure the trimming mitigated any issues observed at the raw reads QC step.

[^1]: The types of analyses we can perform are determined by factors such as availability of genomic resources, library construction, sequencing depth, etc.

## Overview of mapping workflow

```{mermaid}
flowchart LR
    ref_genome[(Reference\nGenome)]
    ref_annotations[(Reference\nAnnotations)]
    build_index{STAR\ngenomeGenerate}
    ref_index[(Reference\nIndex)]

    ref_genome --- build_index
    ref_annotations --- build_index
    build_index --> ref_index

    reads[(Reads)]
    mappings[(Mappings)]
    map_reads{STAR}

    ref_index --- map_reads
    reads --- map_reads
    map_reads --> mappings

```

## Software usage

### STAR usage

#### Software availability

STAR is available as a module that can be loaded on ISAAC:

``` {.bash filename="Terminal"}
module load star/2.7.6a
```


Alternatively, more recent versions are available as Apptainer containers through BioContainers:

```{.bash filename="Terminal"}
function STAR {
  local image_uri="https://depot.galaxyproject.org/singularity/star%3A2.7.11b--h43eeafb_1"
  apptainer exec "${image_uri}" STAR "${@}"
}
```


Both of the methods above make STAR available through the `STAR` command.


### Command usage --- Generate genome index

Basic usage:

``` {.bash filename="Terminal"}
STAR \
  --runMode genomeGenerate \
  --genomeFastaFiles genome.fasta \
  --sjdbGTFfile annotations.gtf \
  --genomeDir STAR
```


## Scripts

### Generate genome index script

``` {.bash filename="generate_genome_index.sh"}
#!/bin/bash

#SBATCH --job-name=generate_genome_index
#SBATCH --cpus-per-task=8
#SBATCH --mem=48GB
#SBATCH --time=00-04:00:00
<... Remaining constant SBATCH flags ...>


#######################################
# Constants
#######################################
# Path to directory where references should be stored
readonly references_dir="data/references"
# Path to directory where STAR genome index should be stored
readonly star_genome_dir="${references_dir}/STAR"
# URL for reference genome in fasta (fna) format
readonly genome_url="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/263/795/GCF_002263795.3_ARS-UCD2.0/GCF_002263795.3_ARS-UCD2.0_genomic.fna.gz"
# URL for reference gene annotations in GTF format
readonly annotations_url="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/263/795/GCF_002263795.3_ARS-UCD2.0/GCF_002263795.3_ARS-UCD2.0_genomic.gtf.gz"


#######################################
# Load software
#######################################
# echo to stderr
function errcho {
  >&2 echo "${@}"
}
function STAR {
  local image_uri="https://depot.galaxyproject.org/singularity/star%3A2.7.11b--h43eeafb_1"
  apptainer exec "${image_uri}" STAR "${@}"
}


#######################################
# Main program
#######################################
# create target directories
mkdir -p "${references_dir}"

# download reference genome
errcho "Download reference genome"
wget \
  --no-clobber \
  --directory-prefix="${references_dir}" \
  "${genome_url}"
# store the path to the reference genome in a variable
genome_path="${references_dir}/$(basename "${genome_url}")"

# download reference gene annotations
errcho "Download reference gene annotations"
wget \
  --no-clobber \
  --directory-prefix="${references_dir}" \
  "${annotations_url}"
# store the path to the reference genome in a variable
annotations_path="${references_dir}/$(basename "${annotations_url}")"

# decompress gzipped genome and annotations files
# this is done using a temporary directory for the convenience of not having to manage uncompressed files ourselves
unzipped_dir=$(mktemp -d)
zcat "${genome_path}" > "${unzipped_dir}/genome.fasta"
zcat "${annotations_path}" > "${unzipped_dir}/annotations.gtf"

# generate STAR genome index
errcho "Generate STAR genome index"
STAR \
  --runMode genomeGenerate \
  --genomeDir "${star_genome_dir}" \
  --runThreadN "${SLURM_CPUS_PER_TASK:-1}" \
  --genomeFastaFiles "${unzipped_dir}/genome.fasta" \
  --sjdbGTFfile "${unzipped_dir}/annotations.gtf"
```


### Link trimmed reads

We want to align the trimmed reads to our reference genome.
Therefore, we create links to our trimmed reads that are located in the read trimming directory.

``` {.bash filename="link_reads.sh"}
#!/usr/bin/env bash

# Set constants
# make a directory to hold links to trimmed reads
readonly trim_reads_dir="data/reads/trim"

mkdir -p "${trim_reads_dir}"

# make links to trimmed reads from read trimming step
ln -rs ../02_trim_reads/data/reads/trim/*R1_001_trimmed.fastq.gz "${trim_reads_dir}"
```


### Map reads to genome index

``` {.bash filename="map_reads.sh"}
#!/bin/bash

#SBATCH --job-name=map_reads
#SBATCH --cpus-per-task=8
#SBATCH --mem=32GB
#SBATCH --time=00-00:45:00
#SBATCH --array=0-112%8
#<... Remaining constant SBATCH flags ...>


#######################################
# Constants
#######################################
# Array of fastq files
readonly fastqs=(data/reads/trim/*.fastq.gz)
# Path to directory where STAR genome index is stored
readonly star_genome_dir="data/references/STAR"
# Path to directory where output map (BAM) files from STAR should be stored
readonly map_dir="data/mappings"


#######################################
# Load software
#######################################
# echo to stderr
function errcho {
  >&2 echo "${@}"
}
function STAR {
  local image_uri="https://depot.galaxyproject.org/singularity/star%3A2.7.11b--h43eeafb_1"
  apptainer exec "${image_uri}" STAR "${@}"
}


#######################################
# Main program
#######################################
# create target directories
mkdir -p "${map_dir}"

# create array of fastq prefixes

## use associative array to store unique fastq path prefixes
declare -A unsorted_unique_fastq_path_prefixes
## iterate over fastqs and store path prefixes in the associative array
for fastq in "${fastqs[@]}"
do
    # extract the path prefix from the full fastq file path and add it to the associative array
    fastq_path_prefix=$(echo "${fastq}" | sed -E 's/_S[0-9]+_L[0-9]{3}.*//g')
    unsorted_unique_fastq_path_prefixes["${fastq_path_prefix}"]=1
done

## the associative array is useful for getting unique elements
## however, it is not determinitive and is not easily indexed by number
## we need a constant ordering and easy indexing by number to run in parallel with Slurm arrays
## sort the fastq path prefixes to get a determinitive order
## store the output as a regular array which we can access by numerical index
unique_fastq_path_prefixes=($(printf '%s\n' "${!unsorted_unique_fastq_path_prefixes[@]}" | sort))

# calculate the total number of mapping jobs to run
# this is the number of unique samples which is size (length) of the fastq path prefixes array
# note that this is not the number of fastq files
errcho "Total number of mapping jobs to run: ${#unique_fastq_path_prefixes[@]}"

# get the fastq path prefix for the current array index
errcho "Array job index: ${i}"
fastq_path_prefix="${unique_fastq_path_prefixes[$i]}"

errcho "Fastq path prefix: ${fastq_path_prefix}"
# get prefix for sample name
sample_prefix=$(basename "${fastq_path_prefix}")
errcho "Sample prefix: ${sample_prefix}"
# get paths to fastq files as an array
fastq_paths=("${fastq_path_prefix}"*.fastq.gz)
errcho "Fastq files for this sample: ${fastq_paths[@]}"
# convert the array of fastq file paths into a string of fastq file paths separated by commas
oldifs="${IFS}"
IFS=','
read_files_in="${fastq_paths[*]}"
IFS="${oldifs}"
errcho "Reads files input: ${read_files_in}"

# map reads with STAR
STAR \
    --runThreadN "${SLURM_CPUS_PER_TASK:-1}" \
    --genomeDir "${star_genome_dir}" \
    --readFilesIn "${read_files_in}" \
    --readFilesCommand gunzip -c \
    --outFileNamePrefix "${map_dir}/${sample_prefix}" \
    --outSAMtype BAM Unsorted
errcho
```
