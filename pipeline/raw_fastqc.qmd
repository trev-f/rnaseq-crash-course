# Raw Reads FastQC

## Learning objectives

- Generate raw reads QC reports with FastQC
- Produce a compositve raw reads QC report with MultiQC

## Purpose

Raw reads QC should be performed to ensure that the quality of reads that came off of the sequencing platform is acceptable.
FastQC is a straightforward command line tool for generating QC reports for reads in fastq format.

A few of the metrics we're most interested in include:

- Total number of reads and bases.
- Average quality along reads.
- Overrepresented sequences.
- Adapter contamination.

## FastQC usage

### Software availability

FastQC is available as a module that can be loaded on ISAAC:

``` {.bash filename="Terminal"}
module load fastqc/0.11.9
```


Alternatively, more recent versions are available as Apptainer containers through BioContainers:

```{.bash filename="Terminal"}
function fastqc {
  local image_uri=https://depot.galaxyproject.org/singularity/fastqc:0.12.1--hdfd78af_0
  apptainer exec "${image_uri}" fastqc "${@}"
}
```


### Command usage

Both of the methods above make FastQC available through the `fastqc` command.

Basic usage:

``` {.bash filename="Terminal"}
fastqc sample1.fastq.gz sample2.fastq.gz # <1>
```
1. An arbitrary number of sequence files can be specified.
Multiple sequence files must be separated by spaces.
In practice we typically run FastQC on (gzipped) fastq files, but other sequence file formats can be used (run `fastqc --help` for details).


Useful options:

``` {.bash filename="Terminal"}
fastqc \
  --outdir reports/fastqc \          # <1>
  --threads 2 \                      # <2>
  sample1.fastq.gz sample2.fastq.gz
```
1. The directory to write output files into.
If this directory does not exist, the command will fail with an error.
2. The number of threads to use.
This is the number of files that FastQC will process simultaneously.


## MultiQC usage

### Software availability

::: {.callout-note title="MultiQC version"}
MultiQC had a significant update around v1.19 that made its reports significantly better from a user standpoint, especially when working with a large number of samples.
I strongly recommend using the most recent MultiQC version (v1.21 at the time of writing this).
:::


MultiQC is available as Apptainer containers through BioContainers:

```{.bash filename="Terminal"}
function multiqc {
  local image_uri=https://depot.galaxyproject.org/singularity/multiqc:1.21--pyhdfd78af_0
  apptainer exec "${image_uri}" multiqc "${@}"
}
```


### Command usage

The method above makes MultiQC available through the `multiqc` command.

Basic usage:

``` {.bash filename="Terminal"}
multiqc . # <1>
```
1. This will traverse through all files and directories in the current working directory (`.`) and add any files that MultiQC recognizes to the report that it generates.


Useful options:

``` {.bash filename="Terminal"}
multiqc \
  --filename raw_reads_qc \ # <1>
  --outdir reports \        # <2>
  --title "Raw reads QC" \  # <3>
  .
```
1. Filename to use for the MultiQC report and data files.
2. The directory to write output files into.
3. A title for the report.
